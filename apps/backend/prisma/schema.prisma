// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  companies Company[]
  cards     Card[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  cards     Card[]
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id             Int           @id @default(autoincrement())
  cardNumber     String
  expiryDate     DateTime
  cvv            String
  status         String        @default("inactive") // TODO: Change to enum
  spendLimit     Float
  remainingSpend Float
  userId         Int
  companyId      Int
  user           User          @relation(fields: [userId], references: [id])
  company        Company       @relation(fields: [companyId], references: [id])
  transactions   Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Invoice {
  id        Int      @id @default(autoincrement())
  amountDue Float
  dueDate   DateTime
  status    String   @default("pending")
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  cardId      Int
  card        Card     @relation(fields: [cardId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
